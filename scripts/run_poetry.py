#!/usr/bin/env python3
"""
Simple poetry generation script created by the HTML interface.
This file is automatically generated - edit poetry_generator.html to customize.
"""

import sys
import os

def run_poetry_generation():
    """Run the poetry generation with pre-configured settings."""
    
    # Default configuration - will be replaced by HTML form
    config = {
        'api_mode': '1',  # 1 for Direct APIs, 2 for OpenRouter
        'poet1_provider': 'Claude',
        'poet1_model': 'claude-3-5-sonnet-20241022',
        'poet2_provider': 'OpenAI', 
        'poet2_model': 'gpt-4o',
        'theme': 'a walk in the snow',
        'form': 'haiku',
        'conversation_length': '2',
        'emojis': 'no'
    }
    
    print("üé≠ Poetry Agents - Automatic Generation")
    print("=" * 50)
    
    # Check if main.py exists
    if not os.path.exists('main.py'):
        print("‚ùå Error: main.py not found!")
        print("üí° Make sure you're running this from the PoetryAgents directory.")
        sys.exit(1)
    
    # Import and run the dialogue system directly
    try:
        from dialogue_manager import DialogueManager
        
        # Convert config to the format expected by DialogueManager
        dialogue_config = convert_config(config)
        
        print(f"üé® Theme: {config['theme']}")
        print(f"üìù Form: {config['form']}")
        print(f"ü§ñ Poet 1: {config['poet1_provider']} ({config['poet1_model']})")
        print(f"ü§ñ Poet 2: {config['poet2_provider']} ({config['poet2_model']})")
        print(f"üí¨ Rounds: {config['conversation_length']}")
        print(f"üòä Emojis: {config['emojis']}")
        print()
        
        print("üöÄ Generating poetry dialogue...")
        
        # Generate dialogue
        manager = DialogueManager()
        dialogue_data = manager.generate_dialogue(dialogue_config)
        
        # Save to markdown file
        filename = manager.save_dialogue_to_markdown(dialogue_data)
        
        print(f"\n‚úÖ Poetry dialogue generated successfully!")
        print(f"üìÅ File saved: {filename}")
        print(f"üìÇ Full path: {os.path.abspath(filename)}")
        
        # Try to open the file
        try:
            import subprocess
            import platform
            
            system = platform.system()
            if system == "Darwin":  # macOS
                subprocess.run(["open", filename])
            elif system == "Windows":
                os.startfile(filename)
            elif system == "Linux":
                subprocess.run(["xdg-open", filename])
            
            print("üéâ Poetry file opened in your default markdown viewer!")
            
        except Exception:
            print("üí° Open the file manually to view your beautiful poetry!")
    
    except ImportError as e:
        print(f"‚ùå Import Error: {e}")
        print("üí° Make sure all dependencies are installed: pip install -r requirements.txt")
    except Exception as e:
        print(f"‚ùå Error: {e}")
        print("üí° Check your API keys are set in environment variables")

def convert_config(config):
    """Convert simple config to DialogueManager format."""
    
    # Handle form-specific lengths
    form = config['form']
    fixed_lengths = {
        'haiku': (3, 'lines'),
        'sonnet': (14, 'lines'),
        'villanelle': (19, 'lines'),
        'limerick': (5, 'lines'),
        'tanka': (5, 'lines')
    }
    
    if form in fixed_lengths:
        poem_length, length_unit = fixed_lengths[form]
    else:
        # Variable forms
        default_lengths = {
            'prose': (2, 'paragraphs'),
            'ballad': (4, 'stanzas'),
            'ghazal': (7, 'couplets')
        }
        poem_length, length_unit = default_lengths.get(form, (4, 'lines'))
    
    # Convert to DialogueManager format
    dialogue_config = {
        'theme': config['theme'],
        'num_agents': 2,
        'form': form,
        'poem_length': poem_length,
        'length_unit': length_unit,
        'conversation_length': int(config['conversation_length']),
        'use_openrouter': config['api_mode'] == '2',
        'use_emojis': config['emojis'].lower() == 'yes',
        'output_format': 'markdown'
    }
    
    if config['api_mode'] == '2':
        # OpenRouter mode
        dialogue_config.update({
            'agent1_llm': 'OpenRouter',
            'agent2_llm': 'OpenRouter',
            'agent1_openrouter_search': config.get('poet1_search', 'anthropic/claude-3.5-sonnet'),
            'agent2_openrouter_search': config.get('poet2_search', 'openai/gpt-4o'),
            'agent1_claude_model': None,
            'agent1_gemini_model': None,
            'agent1_openai_model': None,
            'agent2_claude_model': None,
            'agent2_gemini_model': None,
            'agent2_openai_model': None
        })
    else:
        # Direct API mode
        dialogue_config.update({
            'agent1_llm': config['poet1_provider'],
            'agent2_llm': config['poet2_provider'],
            'agent1_openrouter_search': None,
            'agent2_openrouter_search': None
        })
        
        # Set specific models
        for agent_num, provider_key, model_key in [(1, 'poet1_provider', 'poet1_model'), (2, 'poet2_provider', 'poet2_model')]:
            provider = config[provider_key]
            model = config[model_key]
            
            # Initialize all to None
            dialogue_config[f'agent{agent_num}_claude_model'] = None
            dialogue_config[f'agent{agent_num}_gemini_model'] = None
            dialogue_config[f'agent{agent_num}_openai_model'] = None
            
            # Set the appropriate one
            if provider == 'Claude':
                dialogue_config[f'agent{agent_num}_claude_model'] = model
            elif provider == 'Gemini':
                dialogue_config[f'agent{agent_num}_gemini_model'] = model
            elif provider == 'OpenAI':
                dialogue_config[f'agent{agent_num}_openai_model'] = model
    
    return dialogue_config

if __name__ == '__main__':
    run_poetry_generation()